{"version":3,"sources":["components/SearchForm.tsx","store/loading.ts","store/loaded.ts","store/posts.ts","store/errorMessage.ts","helpers/api.ts","store/index.ts","components/User.tsx","components/Comment.tsx","components/CommentList.tsx","components/Post.tsx","components/PostList.tsx","helpers/matchedPosts.ts","components/Preloader.tsx","components/LoadButton.tsx","App.tsx","index.tsx"],"names":["SearchForm","handleChangeInput","inputValue","className","type","value","onChange","e","required","reducer","loading","action","loadedReducer","state","setPosts","posts","postsReducer","filter","post","id","map","comments","comment","errorMessageReducer","message","getDataFromServer","url","a","fetch","response","json","getDataPosts","Promise","all","users","dataPosts","user","find","person","userId","postId","rootReducer","combineReducers","loadingReducer","loaded","isLoading","getErrorMessage","getPosts","isLoaded","store","createStore","composeWithDevTools","applyMiddleware","thunk","User","name","email","href","Comment","body","dispatch","useDispatch","onClick","deleteComment","CommentList","key","Post","useState","isChecked","toggleChecked","title","htmlFor","checked","PostList","useSelector","setInputValue","visiblePosts","setVisiblePosts","debouncedInputValue","useDebounce","useEffect","console","log","result","regexp","RegExp","matchedPosts","test","target","length","Preloader","LoadButton","disabled","App","errorMessage","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.087aa89c.chunk.js","sourcesContent":["import React from 'react';\n\ntype SearchFormProps = {\n  inputValue: string;\n  handleChangeInput: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nexport const SearchForm: React.FC<SearchFormProps> = ({ handleChangeInput, inputValue }) => {\n  return (\n    <div className=\"input-field\">\n      <i className=\"material-icons\">search</i>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={(e) => handleChangeInput(e)}\n        required\n      />\n    </div>\n  );\n};\n","import { AnyAction } from 'redux';\n\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_LOADED = 'SET_LOADED';\n\nexport const setLoaded = () => ({ type: SET_LOADED });\n\nconst loadedReducer = (state = false, action: AnyAction) => {\n  switch (action.type) {\n    case SET_LOADED:\n      return true;\n\n    default:\n      return state;\n  }\n};\n\nexport default loadedReducer;\n","import { AnyAction } from 'redux';\n\nconst SET_POSTS = 'SET_POSTS';\nconst DELETE_COMMENT = 'DELETE_COMMENT';\nconst DELETE_POST = 'DELETE_POST';\n\n\nexport const setPosts = (posts: DataPost[]) => ({ type: SET_POSTS, posts });\nexport const deleteComment = (id: number) => ({ type: DELETE_COMMENT, id });\nexport const deletePost = (id: number) => ({ type: DELETE_POST, id });\n\nconst postsReducer = (posts: DataPost[] = [], action: AnyAction): DataPost[] => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n\n    case DELETE_POST:\n      return posts.filter(post => post.id !== action.id);\n\n    case DELETE_COMMENT:\n      return  posts.map(post => ({\n        ...post,\n        comments: post.comments.filter(comment => comment.id !== action.id),\n      }));\n      \n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","import { AnyAction } from 'redux';\n\n\nconst SET_MESSAGE = 'SET_MESSAGE';\n\nexport const setErrorMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\nconst errorMessageReducer = (message = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n\n    default:\n      return message;\n  }\n};\n\nexport default errorMessageReducer;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/';\nconst POSTS_URL = 'posts';\nconst USERS_URL = 'users';\nconst COMMENTS_URL = 'comments';\n\nconst getDataFromServer = async (url: string) => {\n  const response = await fetch(`${API_URL}${url}.json`);\n\n  return response.json();\n};\n\nexport const getDataPosts = async () => {\n  const [posts, users, comments] = await Promise.all([\n    getDataFromServer(POSTS_URL),\n    getDataFromServer(USERS_URL),\n    getDataFromServer(COMMENTS_URL),\n  ]);\n\n  const dataPosts = posts.map((post: Post) => (\n    {\n      ...post,\n      user: users.find((person: User) => (person.id === post.userId)),\n      comments: comments.filter((comment: Comment) => (comment.postId === post.id)),\n    }));\n\n  return dataPosts;\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport loadedReducer, { setLoaded } from './loaded';\nimport postsReducer, { setPosts } from './posts';\nimport errorMessageReducer, { setErrorMessage } from './errorMessage';\nimport { getDataPosts } from '../helpers/api';\n\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  loaded: loadedReducer,\n  posts: postsReducer,\n  message: errorMessageReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const getErrorMessage = (state: RootState) => state.message;\nexport const getPosts = (state: RootState) => state.posts;\nexport const isLoaded = (state: RootState) => state.loaded;\n\nexport const loadDataPosts = () => {\n\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n\n    try {\n      const posts = await getDataPosts();\n\n      dispatch(setPosts(posts));\n      dispatch(setLoaded());\n    } catch (error) {\n      dispatch(setErrorMessage('Sorry, Something is wrong'));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\n\n\nexport const User = ({ name, email }: User) => (\n  <div className=\"author\">\n    <div className=\"author_name\">\n      <p>{name}</p>\n      <p>\n        <a className=\"author_email\" href={`mailto:${email}`}>\n          {email}\n        </a>\n      </p>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteComment } from '../store/posts';\n\nexport const Comment = ({ name, email, body, id }: Comment) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li className=\"guest\">\n      <button\n        className=\"quest_delete-btn\"\n        type=\"button\"\n        onClick={() => dispatch(deleteComment(id))}\n      />\n      \n      <p className=\"guest_name\">{name}</p>\n      <p>{body}</p>\n      <p>\n        <a className=\"guest_email\" href={`mailto:${email}`}>\n          {email}\n        </a>\n      </p>\n    </li>\n  );\n}\n","import React from 'react';\nimport { Comment } from './Comment';\n\ntype CommentListProps = {\n  comments: Comment[];\n};\n\nexport const CommentList = ({ comments }: CommentListProps) => (\n  <ul>\n    {comments.map(comment => (\n      <Comment {...comment} key={comment.id} />\n    ))}\n  </ul>\n);\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deletePost } from '../store/posts';\nimport { User } from './User';\nimport { CommentList } from './CommentList';\n\ntype PostProps = {\n  post: DataPost;\n};\n\nexport const Post: React.FC<PostProps> = ({ post }) => {\n  const [isChecked, toggleChecked] = useState<boolean>(false);\n  const dispatch = useDispatch();\n\n  return (\n    <li className=\"post\">\n      <div className=\"post_body\">\n        <button\n          className=\"post_delete-btn\"\n          type=\"button\"\n          onClick={() => dispatch(deletePost(post.id))}\n        />\n        <div>\n          <div className=\"avatar\" />\n          <h3 className=\"post_title\">{post.title}</h3>\n          <p className=\"post_text\">{post.body}</p>\n        </div>\n        <User {...post.user} />\n      </div>\n      <div className=\"toggle-comments\">\n        <label htmlFor=\"checkbox\">\n          <i className=\"toggle-checkbox material-icons\">arrow_drop_down</i>\n          <input id=\"checkbox\" className=\"checkbox\" type=\"checkbox\" checked={isChecked} onChange={() => toggleChecked(!isChecked)} />\n        </label>\n      </div>\n      {isChecked\n        && (<CommentList comments={post.comments} />)}\n    </li>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { matchedPosts } from '../helpers/matchedPosts';\nimport { useDebounce } from 'use-debounce';\nimport { SearchForm } from './SearchForm';\nimport { useSelector } from 'react-redux';\nimport { getPosts } from '../store';\nimport { Post } from './Post';\n\n\nconst PostList: React.FC = () => {\n  const posts = useSelector(getPosts);\n  const [inputValue, setInputValue] = useState<string>('');\n  const [visiblePosts, setVisiblePosts] = useState<DataPost[]>([]);\n  const debouncedInputValue = useDebounce(inputValue, 1000);\n\n  const handleChangeInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value }  = e.target;\n    setInputValue(value);\n  };\n\n  useEffect(() => {\n\n    if (debouncedInputValue) {\n        console.log(debouncedInputValue[0])\n      const result = matchedPosts(posts, debouncedInputValue[0]);\n      setVisiblePosts(result);\n      }\n    }, [debouncedInputValue[0], posts]);\n\n  return (\n    <>\n      <div className=\"search_block\">\n      <SearchForm\n          handleChangeInput={handleChangeInput}\n          inputValue={inputValue}\n        />\n        <div className=\"posts_count\">\n          {visiblePosts.length}\n          {' '}\n          post(s) are found\n        </div>\n      </div>\n      <ul>\n        {visiblePosts.map(post => (\n          <Post\n            post={post}\n            key={post.id}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default PostList;\n","export const matchedPosts = (posts: DataPost[], value: string) => {\n  if(!value){\n    return posts;\n  }\n\n  const regexp = new RegExp(value, 'i');\n  const matchedPosts = posts.filter(post => (regexp.test(post.title) || regexp.test(post.body)));\n\n  return matchedPosts;\n};\n","import React from 'react';\n\nexport const Preloader = () => {\n\n  return (\n  <div className=\"loader\">\n    <div className=\"inner one\"></div>\n    <div className=\"inner two\"></div>\n    <div className=\"inner three\"></div>\n  </div>\n  )\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { isLoading, loadDataPosts } from '../store';\n\nexport const LoadButton = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n\n  return (\n    <button\n      className=\"load_button\"\n      type=\"button\"\n      onClick={() => dispatch(loadDataPosts())}\n      disabled={loading}\n    >\n      Load\n    </button>\n  );\n};\n","import React from 'react';\nimport PostList from './components/PostList';\nimport { useSelector } from 'react-redux';\nimport { Preloader } from './components/Preloader';\n\nimport './App.scss';\nimport { LoadButton } from './components/LoadButton';\nimport { isLoading, isLoaded, getErrorMessage } from './store';\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n  const loaded = useSelector(isLoaded);\n  const errorMessage = useSelector(getErrorMessage);\n\n  return (\n    <div className=\"App\">\n      {!loaded && !loading\n        && (errorMessage.length === 0)\n        && (\n        <LoadButton />\n      )}\n\n      {loading && !loaded && <Preloader />}\n\n      {loaded && (\n        <>\n          <h1>Redux list of posts</h1>\n          <PostList />\n        </>\n      )}\n\n      {!loaded\n        && (errorMessage.length > 0)\n        && (\n        <h1>{errorMessage}</h1>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}